# Set working directory and libraries
library(dplyr)
library(tidyr)
library(purrr)
library(readxl)
library(stringr)
library(ggplot2)

# EXTRAS --------------------------------------------------------------

# Dates

Sys.Date()

as.Date("2018-01-01")
class(as.Date("2018-01-01"))
class("2018-01-01")

date1 <- "Jan 01 2018"
date2 <- "1/12/2018"
date3 <- "Monday, January 15, '18"
class(as.Date(date1, format="%b %d %Y"))
class(as.Date(date2, format="%m/%d/%Y"))

mdy(date1)
mdy(date2)
dmy(date3) # Not a solution for everything!

# Strings

state_unemp <- read.csv("state_unemp_clean.csv", stringsAsFactors=FALSE)
county_unemp <- read.csv("county_unemp_clean.csv", stringsAsFactors=FALSE)

glimpse(state_unemp)
glimpse(county_unemp)

names_vector <- colnames(state_unemp)

grep("Unem", names_vector)
grepl("Unem", names_vector)
str_detect(names_vector, "Unem")

names_vector[str_detect(names_vector, "Unem")]

gsub("_2013", "", names_vector)
str_replace(names_vector, "_2013", "")

paste("Hi", "there!")
paste0("Hi", "there!")

# The 'apply' family

char_vector <- as.character(c(seq(1:12)))
char_df <- data.frame(x=char_vector[1:4], y=char_vector[5:8], z=char_vector[9:12], stringsAsFactors = FALSE)
char_df
str(char_df)

for(i in 1:length(char_df)) {
  char_df[,i] <- as.numeric(char_df[,i])
}

str(char_df)

# Simplifies the underlying data structure
sapply(char_df, as.numeric)

# Always returns a list
lapply(char_df, as.numeric)
lapply(wage_data2[,c(2:length(wage_data2))], regplot, wage_data2$wage)

sapply(a_vector, function(x) ifelse(x%%2 == 0, "even", "odd"))

# tidyr functions

# The "gather" function
a_dataframe <- data.frame(ids = c("x", "y", "z"), y2015 = c(1,2,3), y2016 = c(9,10,3), y2017=c(10,NA,3), stringsAsFactors = FALSE)
str(a_dataframe)
a_dataframe

year_variables <- colnames(a_dataframe)[2:4]
year_data_all <- list()
for(i in 1:length(year_variables)) {
  year_data <- select(a_dataframe, 1, year_variables[i])
  year_data$year <- year_variables[i]
  names(year_data) <- c("ids", "value", "year")
  year_data_all[[i]] <- year_data
}

data.frame(Reduce("rbind", year_data_all))

data_long <- gather(a_dataframe, key=year, value=value, y2015:y2017)
data_long

# Back to wide
spread(data_long, key = year, value=value)

# Using 'union' and 'separate'
bigger_dataframe <- data.frame(ids = c("x", "x", "x", "y", "y", "y", "z", "z", "z"), 
                               vars = c("a","b","c","a","b","c","a","b","c"),
                               y2015 = c(1,2,3,4,5,6,7,8,9), 
                               y2016 = c(9,10,3,90,7,2,NA,8,1), 
                               y2017=c(10,NA,3,10,NA,3,10,NA,3), 
                               stringsAsFactors = FALSE)

data_long <- gather(bigger_dataframe, key=year, value=value, y2015:y2017)
spread(data_long, key=vars, value=value)

# Using real data
weo_raw <- read.csv("weo_report.csv", na.strings=c(""), stringsAsFactors=FALSE)
weo_raw$X2000 <- as.numeric(weo_raw$X2000)
weo_raw$X2002 <- as.numeric(weo_raw$X2002)
weo_raw$X2012 <- as.numeric(weo_raw$X2012)

weo_long <- gather(weo_raw, key=year, value=value, X2000:X2016)
weo_clean <- spread(weo_long, key=Subject.Descriptor, value=value)
weo_clean$year <- as.numeric(gsub("X", "", weo_clean$year))

write.csv(weo_clean, "weo_clean.csv", row.names=FALSE)

# ggplot2 -------------------------------------------------------------

# Grab one year/one country of data
weo_2016 <- weo_full[weo_full$year == 2016,]
weo_country <- weo_full[weo_full$country == "Argentina",]

ggplot(weo_2016, aes(x=unemployment_rate)) +
  geom_histogram(bins=30) +
  labs(x = "Unemployment rate (%)", y = "Frequency", title = "Distribution of unemployment rates, 2016")

ggplot(weo_2016, aes(x=unemployment_rate, y=gdp_cp)) +
  geom_point() +
  labs(x = "Unemployment rate (%)", y = "GDP per capita", title = "Unemployment vs. GDP per capita, 2016")

ggplot(weo_country, aes(x=year, y=unemployment_rate)) +
  geom_point() +
  labs(x = "Year", y = "Unemployment rate (%)", title = "Argentinian unemployment over time")

ggplot(weo_country, aes(x=year, y=unemployment_rate)) +
  geom_point() +
  geom_line() + 
  labs(x = "Year", y = "Unemployment rate (%)", title = "Argentinian unemployment over time")

# Grab a few countries
weo_countries <- weo_full[weo_full$country %in% c("Argentina", "Brazil", "Chile", "Uruguay"),]

ggplot(weo_countries, aes(x=year, y=unemployment_rate, col=country)) +
  geom_line(size=1) +
  labs(x = "Year", y = "Unemployment rate (%)", title = "Unemployment rate in Latin American countries")

# Grab a couple of years
weo_years <- weo_full[weo_full$year %in% c(2014,2015),]

ggplot(weo_years, aes(x=unemployment_rate, fill=factor(year))) +
  geom_histogram(bins=50) +
  labs(x = "Unemployment rate (%)", y = "Frequency", title = "Distribution of unemployment, by year") +
  scale_fill_discrete(name = "Year")

# Side-by-side
ggplot(weo_years, aes(x=unemployment_rate, fill=factor(year))) +
  geom_histogram(bins=50) +
  facet_wrap(~factor(year)) +
  labs(x = "Unemployment rate (%)", y = "Frequency", title = "Distribution of unemployment, by year") +
  scale_fill_discrete(name = "Year")

# ggplot2 - PRACTICE --------------------------------------------------

# Plot the GDP per capita values for the `Europe & Central Asia` region over time, with each country as a separate color; label accordingly
# Using `dplyr` commands (and pipes, if possible), plot the average `unemployment_rate` over time, with each region as its own color; label accordingly