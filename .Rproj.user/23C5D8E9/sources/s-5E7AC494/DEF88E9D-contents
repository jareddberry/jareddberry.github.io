library(tseries)
library(dplyr)
library(tidyr)
library(purrr)
library(stringr)
library(plyr)
library(urca)

setwd("~/1. JHU/Spring 2018/Capstone/Data/Growth/Regression/Growth/Regression with GDP per capita")
growth_data<-read.csv("growth_2008.csv", stringsAsFactors= FALSE)


#This function goes through all the variables in columns 6-19 and spits out the unit-root test results.
adf_results<-lapply(growth_data[6:19],adf.test,alternative="stationary",k=1)
#Because the function above spits out more information than what I require, the following two functions return the D-fuller coefficeint and the t-stat for the ADF test.
pvalues=ldply(adf_results,function(x){x$p.value})
df=ldply(adf_results,function(x){x$statistic})

#The issue is that these functions above perform the ADF tests for each variable of interest, but not for each country.

# JDB Edits -------------------------------------------------------------------------------------------------------------

# Set a vector of unique country names for filter
country_vec <- unique(growth_data$Country)

country_stats <- list()
for (country in country_vec) {
  
  # For each country in the sample, perform a filter and perform the adf test on each variable
  growth_temp <- growth_data[growth_data$Country == country,c(6:19)]
  
  # The test breaks on NA values - for right now I'm just removing these but it might make sense to fill them
  # with either forward filling or linear interpolation
  results_list <- map(growth_temp, function(x) adf.test(x[!is.na(x)], alternative="stationary", k=1))
  results_df <- map_df(adf_results, function(x) cbind(x$p.value, x$statistic))
  
  # Some clean-up
  results_df$stat <- c("p.value", "df")
  results_df$country <- country
  
  # Append
  country_stats[[country]] <- results_df
  
}

# Combine into a data.frame, clean-up, and glimpse final result
adf_results <- do.call("rbind", country_stats)
adf_results <- select(adf_results, country, stat, everything())
glimpse(adf_results)

# -----------------------------------------------------------------------------------------------------------------------


#loop
adf<-list()
for(i in length(unique(growth_data[6:19]))){
  for(j in length(unique(growth_data$Country))){
    adf<-adf.test(growth_data$growth,alternative="stationary",k=1)
    j=j+1
  }
  i=i+1
}


##as a function
adf2<-function(growth_data){
  p<-ncol(growth_data)
  adf_multi<-growth_data(var=names(growth_data), 
                         adf.pvalue=sapply(growth_data, function(v) adf.test(ts(v),alternative="Stationary")$p.value)
                         )
  adf_multi
}
adf2(growth_data$Income_Group)



adf<-list()
for(i in length(unique(growth_data$Country))){
  for(j in length(var)){
    adf<-lapply(growth_data[6:19],adf.test,alternative="stationary",k=1)
    j=j+1
  }
  i=i+1
}

